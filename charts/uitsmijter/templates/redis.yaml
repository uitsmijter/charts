---
apiVersion: v1
kind: Secret
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions
  labels:
    app: uitsmijter-sessions
type: Opaque
data:
  redis-password: {{ .Values.redisPassword | default (randAlphaNum 12) | b64enc | quote }}


---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions-config
  labels:
    app: uitsmijter-sessions
data:
  redis.conf: |
    bind 0.0.0.0
    protected-mode yes
    port 6379
    appendonly yes
    appendfsync everysec
    dir /data

    # Add replication settings
    replica-read-only yes
    replica-serve-stale-data yes

  setup-replication.sh: |
    #!/bin/sh
    HOSTNAME=$(hostname)
    REDIS_PASSWORD=$(cat /secrets/redis-password)

    if [ "$HOSTNAME" != "uitsmijter-sessions-0" ]; then
      # Configure as replica of master with authentication
      redis-cli -a "$REDIS_PASSWORD" --no-auth-warning REPLICAOF uitsmijter-sessions-0.uitsmijter-sessions 6379
      echo "Configured as replica of uitsmijter-sessions-0"
    else
      echo "Configured as master"
    fi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions
  labels:
    app: uitsmijter-sessions
spec:
  serviceName: "uitsmijter-sessions"
  replicas: {{ .Values.redis.replicas | default 3 }}  # 1 master + 2 replicas, all with full data
  selector:
    matchLabels:
      app: uitsmijter-sessions
  template:
    metadata:
      labels:
        app: uitsmijter-sessions
    spec:
      initContainers:
        - name: setup-replication
          image: {{ .Values.redis.image.repository | default "redis" }}:{{ .Values.redis.image.tag | default "8.2.2" }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              cp /config/setup-replication.sh /scripts/
              chmod +x /scripts/setup-replication.sh
          volumeMounts:
            - name: uitsmijter-sessions-config
              mountPath: /config
            - name: scripts
              mountPath: /scripts

      containers:
        - name: redis
          image: {{ .Values.redis.image.repository | default "redis" }}:{{ .Values.redis.image.tag | default "8.2.2" }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Read password from secret
              REDIS_PASSWORD=$(cat /secrets/redis-password)

              # Start Redis with authentication
              redis-server /etc/redis/redis.conf \
                --requirepass "$REDIS_PASSWORD" \
                --masterauth "$REDIS_PASSWORD" &
              REDIS_PID=$!

              # Wait for Redis to be ready
              while ! redis-cli -a "$REDIS_PASSWORD" --no-auth-warning ping > /dev/null 2>&1; do
                echo "Waiting for Redis to start..."
                sleep 1
              done

              # Run replication setup
              /scripts/setup-replication.sh

              # Keep the container running with Redis in foreground
              wait $REDIS_PID
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: uitsmijter-sessions-config
              mountPath: /etc/redis
            - name: data
              mountPath: /data
            - name: scripts
              mountPath: /scripts
            - name: redis-password
              mountPath: /secrets
              readOnly: true

        - name: sentinel
          image: {{ .Values.redis.image.repository | default "redis" }}:{{ .Values.redis.image.tag | default "8.2.2" }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Read password from secret
              REDIS_PASSWORD=$(cat /secrets/redis-password)

              # Wait for master Redis to be reachable
              echo "Waiting for master Redis at uitsmijter-sessions-0.uitsmijter-sessions..."
              until redis-cli -h uitsmijter-sessions-0.uitsmijter-sessions -a "$REDIS_PASSWORD" --no-auth-warning ping > /dev/null 2>&1; do
                echo "Waiting for master Redis..."
                sleep 2
              done
              echo "Master Redis is ready!"

              # Get the IP address of the master
              MASTER_IP=$(getent hosts uitsmijter-sessions-0.uitsmijter-sessions | awk '{ print $1 }')
              echo "Master IP resolved to: $MASTER_IP"

              # Generate sentinel config with IP instead of hostname
              cat > /tmp/sentinel.conf <<EOF
              bind 0.0.0.0
              port 26379
              sentinel monitor uitsmijtersessions $MASTER_IP 6379 2
              sentinel auth-pass uitsmijtersessions $REDIS_PASSWORD
              sentinel down-after-milliseconds uitsmijtersessions 5000
              sentinel parallel-syncs uitsmijtersessions 1
              sentinel failover-timeout uitsmijtersessions 10000
              EOF

              echo "Starting sentinel with config:"
              cat /tmp/sentinel.conf | grep -v "auth-pass"
              echo "sentinel auth-pass uitsmijtersessions [REDACTED]"

              # Start sentinel with the generated config
              redis-sentinel /tmp/sentinel.conf
          ports:
            - containerPort: 26379
          volumeMounts:
            - name: uitsmijter-sessions-config
              mountPath: /etc/redis
            - name: redis-password
              mountPath: /secrets
              readOnly: true

      volumes:
        - name: uitsmijter-sessions-config
          configMap:
            name: uitsmijter-sessions-config
            defaultMode: 0755
        - name: data
          emptyDir: {}
        - name: scripts
          emptyDir: {}
        - name: redis-password
          secret:
            secretName: uitsmijter-sessions
            items:
              - key: redis-password
                path: redis-password

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions
  labels:
    app: uitsmijter-sessions
spec:
  ports:
    - port: 6379
      targetPort: 6379
      name: redis
    - port: 26379
      targetPort: 26379
      name: sentinel
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: uitsmijter-sessions

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ include "uitsmijter.namespace" . }}
  name: uitsmijter-sessions-master
  labels:
    app: uitsmijter-sessions
spec:
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: uitsmijter-sessions
    statefulset.kubernetes.io/pod-name: uitsmijter-sessions-0
